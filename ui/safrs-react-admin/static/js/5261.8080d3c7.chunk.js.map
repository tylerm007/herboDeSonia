{"version":3,"file":"static/js/5261.8080d3c7.chunk.js","mappings":"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","sources":["components/external/UserPasswordTab.tsx","components/ApiAdmin.tsx","components/external/index.tsx","components/apifab/StartStopModal.tsx","components/apifab/ApiFabComponents.tsx","components/Custom.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Typography, Button } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport { FormControl } from \"@mui/material\";\nimport { useRecordContext, useDataProvider } from \"react-admin\";\nimport { httpAuthClient } from \"../../rav4-jsonapi-client/ra-jsonapi-client\";\nimport { useConf } from \"../../Config\";\nimport { useNotify } from \"react-admin\";\n\nexport const UserPasswordTab = () => {\n  const conf = useConf();\n  const notify = useNotify();\n  const record = useRecordContext();\n  const dataProvider = useDataProvider();\n  const [pwdValue, setPwdValue] = useState(\"\");\n  const [rpwdValue, setRPwdValue] = useState(\"\");\n  const [submitColor, setSubmitColor] = useState<\n    \"default\" | \"inherit\" | \"secondary\" | \"primary\" | undefined\n  >(\"secondary\");\n  const onPwdChange = (e: any) => {\n    let pwdValue = e.target.value;\n    setPwdValue(pwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n    // console.log(pwdValue, rpwdValue);\n  };\n  const onRPwdVerify = (e: any) => {\n    let rpwdValue = e.target.value;\n    setRPwdValue(rpwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n    // console.log(pwdValue, rpwdValue);\n  };\n  const handleSubmit = () => {\n    // console.log(rpwdValue);\n    if (pwdValue !== rpwdValue) {\n      notify(\"Passwords don't match\", { type: \"warning\" });\n      return;\n    }\n    if (pwdValue.length < 6) {\n      notify(\"Password too short\", { type: \"warning\" });\n      return;\n    }\n    const data = {\n      password: pwdValue,\n    };\n    httpAuthClient(`${conf.api_root}/Users/${record?.id}/change_password`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    })\n      .then(() => notify(\"Password Changed!\"))\n      .catch(() => notify(`Error Changing Password`, { type: \"warning\" }));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <FormControl>\n        <Grid item xs={12} spacing={4}>\n          <Typography variant=\"body2\" component=\"p\">\n            <b>Change the user password</b>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"New Password\"\n            type=\"password\"\n            onChange={onPwdChange}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Repeat Password\"\n            type=\"password\"\n            onChange={onRPwdVerify}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <Button\n            variant=\"contained\"\n            color={submitColor}\n            onClick={handleSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport const ApiUserPasswordTab = () => {\n  const conf = useConf();\n  const notify = useNotify();\n  const record = useRecordContext();\n  const dataProvider = useDataProvider();\n  const [curPwdValue, setCurPwdValue] = useState(\"\");\n  const [newPwdValue, setNewPwdValue] = useState(\"\");\n  const [rpwdValue, setRPwdValue] = useState(\"\");\n  const [submitColor, setSubmitColor] = useState<\n    \"default\" | \"inherit\" | \"secondary\" | \"primary\" | undefined\n  >(\"secondary\");\n\n  const onCurPwdChange = (e: any) => {\n    let pwdValue = e.target.value;\n    setCurPwdValue(pwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n  };\n  const onNewPwdChange = (e: any) => {\n    let pwdValue = e.target.value;\n    setNewPwdValue(pwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n  };\n  const onRPwdVerify = (e: any) => {\n    let rpwdValue = e.target.value;\n    setRPwdValue(rpwdValue);\n    setSubmitColor(\n      newPwdValue === rpwdValue && newPwdValue.length > 5\n        ? \"primary\"\n        : \"secondary\"\n    );\n  };\n  const handleSubmit = () => {\n    // console.log(rpwdValue);\n    if (newPwdValue !== rpwdValue) {\n      notify(\"Passwords don't match\", { type: \"warning\" });\n      return;\n    }\n    if (newPwdValue.length < 1) {\n      notify(\"Password too short\", { type: \"warning\" });\n      return;\n    }\n    const data = {\n      password: newPwdValue,\n    };\n    httpAuthClient(`${conf.api_root}/Users/${record?.id}/change_password`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    })\n      .then(() => notify(\"Password Changed!\"))\n      .catch(() => notify(`Error Changing Password`, { type: \"warning\" }));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <FormControl>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <Typography variant=\"body2\" component=\"p\">\n            <b>Current user password</b>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Current Password\"\n            type=\"password\"\n            onChange={onCurPwdChange}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <Typography variant=\"body2\" component=\"p\">\n            <b>New user password</b>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"New Password\"\n            type=\"password\"\n            onChange={onNewPwdChange}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Repeat Password\"\n            type=\"password\"\n            onChange={onRPwdVerify}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <Button\n            variant=\"contained\"\n            color={submitColor}\n            onClick={handleSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </FormControl>\n    </Box>\n  );\n};\n","import * as React from \"react\";\nimport { Modal, Box, Grid, TextField, Button, Typography, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from \"@mui/material\";\nimport PlayCircleOutlineIcon from \"@mui/icons-material/PlayCircleOutline\";\nimport { useConf } from \"../Config\";\nimport { Loading, TextInput, useRecordContext, useGetList } from \"react-admin\";\nimport { useForm } from \"react-final-form\";\n\nconst styles = {\n  box: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"75%\",\n    bgcolor: \"background.paper\",\n    border: \"0px solid #000\",\n    boxShadow: 24,\n    p: 4,\n    textAlign: \"left\",\n  },\n  modal: {\n    position: \"absolute\",\n    top: \"10%\",\n    left: \"10%\",\n    overflow: \"scroll\",\n    height: \"100%\",\n    fontWeight: 600,\n    display: \"flex\",\n  },\n  joinedField: { cursor: \"pointer\", color: \"#3f51b5\" },\n  dbBtn: {\n    height: \"80%\",\n    position: \"relative\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  dbGrid: {\n    \"& .MuiTextField-root\": {\n      borderBottom: \"4px solid white\",\n      paddingBottom: \"1em\",\n      paddingRight: \"1em\",\n    },\n  },\n  actions: {\n    textAlign: \"center\",\n    \"& button\": { width: \"99%\" },\n  },\n  connStr: { backgroundColor: \"#ccc\", fontFamily: \"Consolas\" },\n};\n\nconst C2Rpc = async (url: string, data?: any, options?: RequestInit) => {\n  const defaultOptions: RequestInit = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\n    },\n    body: JSON.stringify(data || {}),\n  };\n  const requestOptions = { ...defaultOptions, ...options };\n  const response = await fetch(url, requestOptions);\n  return response.json();\n};\n\nconst ApiModal = ({ record }: { record: any }) => {\n  const [output, setOutput] = React.useState<JSX.Element | null>(null);\n  const [open, setOpen] = React.useState(false);\n  const [boxStyle, setBoxStyle] = React.useState(styles.box);\n\n  const conf = useConf();\n\n  const createApi = async (record: any) => {\n    const createUrl = `${conf.api_root}/Apis/${record?.id}/generate`;\n    setOutput(<Loading />);\n    setBoxStyle(prev => ({ ...prev, top: \"90%\" }));\n    const data = await C2Rpc(createUrl);\n    setOutput(<pre>{JSON.stringify(data, null, 2)}</pre>);\n  };\n\n  const handleOpen = (e: React.MouseEvent) => {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  const handleClose = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <span onClick={handleOpen} style={styles.joinedField} title=\"Relationship\">\n        <PlayCircleOutlineIcon />\n      </span>\n      <Modal\n        sx={styles.modal}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-title\"\n        aria-describedby=\"modal-description\"\n      >\n        <Box sx={boxStyle}>\n          <Typography id=\"modal-title\" variant=\"h6\">\n            Create API\n          </Typography>\n          Pressing the button will generate an API with the following properties:\n          <dl>\n            <dt>Name:</dt>\n            <dd>{record?.name}</dd>\n            <dt>Database URL:</dt>\n            <dd>{record?.connection_string}</dd>\n            <dt>Port:</dt>\n            <dd>{record?.port}</dd>\n            <dt>Hostname:</dt>\n            <dd>{record?.hostname}</dd>\n          </dl>\n          <Button variant=\"outlined\" onClick={() => createApi(record)}>\n            Start <PlayCircleOutlineIcon />\n          </Button>\n          <hr />\n          {output}\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport const ApiGenerateField = (props: any) => {\n  return props.mode === \"list\" ? <ApiModal {...props} /> : null;\n};\n\nexport const ApiShow = (props: any) => (\n  <>\n    <div>xxxx</div>\n    <ApiModal {...props} />\n    {props.show}\n  </>\n);\n\nconst DBConnectionEdit = (props: any) => {\n  const form = useForm();\n  const record = useRecordContext();\n  const [open, setOpen] = React.useState(false);\n  const [other, setOther] = React.useState(record?.connection_string || \"\");\n  const [username, setUsername] = React.useState(\"user\");\n  const [password, setPassword] = React.useState(\"pass\");\n  const [dbhost, setDbhost] = React.useState(\"dbhost\");\n  const [dbname, setDbname] = React.useState(\"dbname\");\n  const [dialect, setDialect] = React.useState(\"Other\");\n  const [logData, setLogData] = React.useState<React.ReactNode>(null);\n  const conf = useConf();\n\n  const selectDialect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const dialect = e.target.value;\n    setDialect(dialect);\n    if (dialect === \"sqlite\") {\n      setUsername(\"\");\n      setPassword(\"\");\n      setDbhost(\"\");\n    }\n  };\n\n  const createConn = () => {\n    if (dialect === \"Other\") return other;\n    return dialect === \"sqlite\"\n      ? `${dialect}://${dbname}`\n      : `${dialect}://${username}:${password}@${dbhost}/${dbname}`;\n  };\n\n  const testConn = async (connectionString: string) => {\n    const createUrl = `${conf.api_root}/Apis/test_conn`;\n    const data = { connection_string: connectionString };\n    try {\n      const responseData = await C2Rpc(createUrl, data);\n      setLogData(\n        <>\n          <Typography variant=\"h6\">Result:</Typography>\n          <pre>{JSON.stringify(responseData, null, 2)}</pre>\n        </>\n      );\n    } catch (err) {\n      alert(\"Connection test failed\");\n    }\n  };\n\n  const createApi = async () => {\n    if (!record?.id) {\n      alert(\"You must first save the API\");\n      setLogData(\"You must first save the API\");\n      return;\n    }\n    const createUrl = `${conf.api_root}/Apis/${record?.id}/generate`;\n    setLogData(<Loading />);\n    try {\n      const responseData = await C2Rpc(createUrl);\n      setLogData(<pre>{JSON.stringify(responseData, null, 2)}</pre>);\n    } catch (err) {\n      alert(\"API generation failed\");\n    }\n  };\n\n  return (\n    <>\n      <Grid container spacing={4}>\n        <Grid item xs={4}>\n          <TextInput\n            source=\"connection_string\"\n            defaultValue={createConn()}\n            helperText=\"SQLAlchemy connection string syntax\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            variant=\"outlined\"\n            onClick={() => setOpen(true)}\n            color=\"primary\"\n            size=\"large\"\n            sx={styles.dbBtn}\n          >\n            Configure Connection\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n        sx={styles.modal}\n        aria-labelledby=\"modal-title\"\n        aria-describedby=\"modal-description\"\n      >\n        <Box sx={styles.box}>\n          <Grid container spacing={4} sx={styles.dbGrid}>\n            <Grid item xs={12}>\n              <Typography id=\"modal-title\" variant=\"h6\">\n                Database Configuration\n              </Typography>\n              <hr />\n            </Grid>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n                <FormLabel>DB Dialect</FormLabel>\n                <RadioGroup\n                  defaultValue=\"Other\"\n                  name=\"radio-buttons-group\"\n                  onChange={selectDialect}\n                >\n                  <FormControlLabel value=\"mysql+pymysql\" control={<Radio />} label=\"MySQL\" />\n                  <FormControlLabel value=\"oracle\" control={<Radio />} label=\"Oracle\" />\n                  <FormControlLabel value=\"postgresql\" control={<Radio />} label=\"Postgres\" />\n                  <FormControlLabel value=\"sqlite\" control={<Radio />} label=\"SQLite\" />\n                  <FormControlLabel value=\"mssql+pyodbc\" control={<Radio />} label=\"SQLServer\" />\n                  <FormControlLabel value=\"Other\" control={<Radio />} label=\"Manual:\" />\n                </RadioGroup>\n                <TextField\n                  label=\"Manual\"\n                  variant=\"outlined\"\n                  fullWidth\n                  value={other}\n                  onChange={(e) => setOther(e.target.value)}\n                  helperText=\"Manual connection string configuration\"\n                />\n              </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n              <TextField label=\"Username\" variant=\"outlined\" value={username} onChange={(e) => setUsername(e.target.value)} />\n              <TextField label=\"Password\" variant=\"outlined\" value={password} onChange={(e) => setPassword(e.target.value)} />\n              <TextField label=\"Database host\" variant=\"outlined\" value={dbhost} onChange={(e) => setDbhost(e.target.value)} />\n              <TextField label=\"Database name\" variant=\"outlined\" value={dbname} onChange={(e) => setDbname(e.target.value)} />\n            </Grid>\n            <Grid item xs={6}>\n              <Typography>\n                Connection String: <span style={styles.connStr}>{createConn()}</span>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sx={styles.actions}>\n              <hr />\n              <Button variant=\"outlined\" color=\"primary\" onClick={() => testConn(createConn())}>\n                Test Connection\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => {\n                  setOpen(false);\n                  form.change(\"connection_string\", createConn());\n                }}\n              >\n                Save & Close\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={createApi}\n                disabled={!record?.id}\n                title={record?.id ? \"\" : \"You must first save the API\"}\n              >\n                Generate API\n              </Button>\n              <Button variant=\"outlined\" color=\"primary\" onClick={() => setOpen(false)}>\n                Close\n              </Button>\n            </Grid>\n            <Grid item xs={12}>\n              {logData}\n            </Grid>\n          </Grid>\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport const DBConnection = (props: any) => {\n  const record = useRecordContext();\n  const value = record?.connection_string || \"\";\n\n  return props.mode !== \"edit\" && props.mode !== \"create\"\n    ? <Typography>{value}</Typography>\n    : <DBConnectionEdit {...props} />;\n};\n\nconst ApiURL = ({ name }: { name: string }) => {\n  const url = `/${name}/api`;\n  return (\n    <Typography>\n      <a href={url}>{url}</a>\n    </Typography>\n  );\n};\n\nexport const ApiAdminHome = () => {\n  const { data } = useGetList(\"Apis\", { pagination: { page: 0, perPage: 100 } });\n\n  const apis = data?.map((api) => (\n    <li key={api.id}>\n      <ApiURL name={api.name} />\n    </li>\n  ));\n\n  return (\n    <>\n      <Typography variant=\"h6\">APIs</Typography>\n      <ul>{apis}</ul>\n    </>\n  );\n};","import * as React from \"react\";\n\nexport const MyComp = (props: any) => {\n  return <div>HMMMM</div>;\n};\n","import React, { useState } from 'react';\r\nimport { Modal, Box, Typography, Button } from '@mui/material';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport { useEditController, \r\n  useUpdate,\r\n  SimpleForm, \r\n  TextInput, \r\n  SelectInput, \r\n  useRecordContext, \r\n  useRefresh,\r\n  useNotify} from \"react-admin\";\r\nimport { Card } from \"@mui/material\";\r\n\r\nconst style = {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"fit-content\",\r\n    bgcolor: \"background.paper\",\r\n    BorderRadius: \"4px\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    textAlign: \"center\",\r\n  };\r\n\r\nconst buttonStyle = {\r\n    color: 'primary.main',  // Text color\r\n    border: '0px solid red',\r\n    borderColor: 'primary.main',  // Border color\r\n    backgroundColor: 'transparent',  // Transparent background\r\n    // '&:hover': {\r\n    //   backgroundColor: 'rgba(0, 0, 0, 0.04)',  // Slightly opaque on hover\r\n    //   borderColor: 'primary.dark',  // Darker border on hover\r\n    // },\r\n    // '&:active': {\r\n    //   backgroundColor: 'rgba(0, 0, 0, 0.08)',  // More opaque when clicked\r\n    // },\r\n    // '&:focus': {\r\n    //   boxShadow: '0 0 0 3px rgba(25, 118, 210, 0.3)',  // Focus outline\r\n    // }\r\n  }\r\n\r\nexport const StartStopModal = ({record} : {record:any}) => {\r\n  \r\n    const running = record.running;\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = (e: any) => {\r\n        setOpen(true);\r\n        e.stopPropagation();\r\n    };\r\n    const handleClose = (e: any) => {\r\n        e.stopPropagation();\r\n        setOpen(false);\r\n    };\r\n\r\n    let runningIcon = running ? \r\n      <CheckCircleIcon sx={{ color: '#39b38a', fontSize: \"1.4em\"}} /> : \r\n      <CancelIcon sx={{ color: '#444', fontSize: \"1.4em\" }} />\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"text\" sx={buttonStyle} onClick={handleOpen}>\r\n        {runningIcon}\r\n      </Button>\r\n      \r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        \r\n        <Box sx={style}>\r\n          <StartStopBox/>\r\n          <Button onClick={handleClose} sx={{ mt: 2 }} variant=\"outlined\">\r\n            Close Window\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst startApp = (e : any) => {\r\n  e.stopPropagation();\r\n}\r\n\r\nconst StartStopBox = () => {\r\n  \r\n    const startStopApp = (e : any) => {\r\n      e.stopPropagation();\r\n      update()\r\n      notify(`${action} app`)\r\n      setTimeout(() => {\r\n         refresh();\r\n         if(error){\r\n            console.error(\"startstop r:\", error)\r\n         }\r\n      }, 2000);\r\n    }\r\n    \r\n    const record = useRecordContext()\r\n    const notify = useNotify();\r\n    const refresh = useRefresh()\r\n    const action = record?.running ? \"Stop\" : \"Start\"\r\n    const [update, { data, isPending, error }] = useUpdate(\r\n      'Project',\r\n      { id: record?.id, data: {running: !record?.running}, previousData: record }\r\n    );\r\n    \r\n    return <>\r\n            <Typography sx={{ mt: 2 }}>     \r\n                <Button variant='outlined' onClick={startStopApp}>{action} the application</Button>\r\n            </Typography>\r\n          </>\r\n}\r\n","// Remove the import statement for 'React'\r\nimport { Box, Link, IconButton } from '@mui/material';\r\nimport { useRecordContext } from 'react-admin';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport { StartStopModal } from './StartStopModal.tsx';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\n\r\n// Remove the unused destructured elements\r\nexport const Running = () => {\r\n  const record = useRecordContext();\r\n\r\n  if (!record) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ textAlign: 'center' }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n        <StartStopModal record={record} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const ProjectLink = () => {\r\n\r\n  const record = useRecordContext();\r\n\r\n  if (!record || !record.running) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Link href={record.link} target=\"_blank\" onClick={(e) => e.stopPropagation()}>\r\n      <OpenInNewIcon sx={{ color: 'rgb(63, 81, 181)' }} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport const DownloadProject = () => {\r\n  const record = useRecordContext();\r\n  if (!record) {\r\n    return <></>;\r\n  }\r\n  return (\r\n    <Link title=\"Download\" href={record.download} target=\"_blank\" onClick={(e) => e.stopPropagation()}>\r\n      <IconButton>\r\n        <DownloadIcon sx={{ color: 'rgb(63, 81, 181)' }} />\r\n      </IconButton>\r\n    </Link>\r\n  );\r\n};\r\n\r\n  \r\n  ","import Grid from \"@mui/material/Grid\";\nimport { Typography } from \"@mui/material\";\nimport { TextField, PasswordInput } from \"react-admin\";\nimport * as React from \"react\";\nimport { useRecordContext, useRedirect } from \"react-admin\";\nimport { Create, SimpleForm } from 'react-admin';\nimport { TextInput } from 'react-admin';\nimport {CustomAttrForm} from './apifab/ApiFabCreate.tsx'\nimport {ShowApiFab} from './apifab/ShowApiFab.tsx'\nimport { Box } from '@mui/material';\n\nexport * from \"./external/UserPasswordTab\";\nexport * from \"./ApiAdmin\";\nexport * from \"./external\";\nexport * from \"./apifab/ApiFabComponents.tsx\"\n\nexport const SampleColumnField = ({ attribute }: { attribute: any }) => {\n  console.log(\"attribute: \", attribute);\n  return (\n    <TextField\n      source={attribute.name}\n      key={attribute.name}\n      style={{ color: \"red\" }}\n    />\n  );\n};\n\nexport const EmployeeLabel = (props: any) => {\n  const employee = props.instance;\n  return (\n    <div>\n      {\" \"}\n      {employee.attributes?.FirstName} {employee.attributes?.LastName}\n    </div>\n  );\n};\n\nexport const CustomerLabel = (props: any) => {\n  const customer = props.instance;\n  return (\n    <div>\n      {\" \"}\n      <b>{customer.attributes?.CompanyName}</b>{\" \"}\n      <i>{customer.attributes?.ContactName}</i>\n    </div>\n  );\n};\n\nexport const UserPasswordField = (props: any) => {\n  if (props.mode === \"list\") {\n    return <span />;\n  }\n  if (props.mode === \"edit\") {\n    return (\n      <>\n        <Grid item xs={12} spacing={4}>\n          <Typography variant=\"h6\" component=\"h6\">\n            Change Password\n          </Typography>\n        </Grid>\n        <Grid item xs={4} spacing={4}>\n          <PasswordInput source=\"_password\" />{\" \"}\n        </Grid>\n        <Grid item xs={4} spacing={4}>\n          <PasswordInput source=\"_password\" />{\" \"}\n        </Grid>\n        <Grid item xs={4} spacing={4}></Grid>\n      </>\n    );\n  }\n  return <></>;\n};\n\nexport const CustomTab = (props: any) => {\n  // eslint-disable-next-line no-unused-vars\n  const record = useRecordContext();\n  return <div>Some Text</div>;\n};\n\n\nexport const CreateLocation = (props) => {\n  console.log('crll', props)\n  return <>\n  <Create>\n    <CustomAttrForm attributes={[]} />\n  </Create>\n  </>\n};\n\nexport const Overlay = () => (\n  // full-screen overlay\n  <>\n    <div id=\"popup-overlay\"></div>\n  </>\n);\n\n\nexport const showApiFab = () => {\n  return <ShowApiFab />\n}\n\n\nexport const CreateApiFab = () => {\n  \n  const redirect = useRedirect();\n  React.useEffect(() => {\n      // edit view\n      redirect('/Home')\n  }, [])\n\n  return <></>\n}"],"names":["UserPasswordTab","conf","useConf","notify","useNotify","record","useRecordContext","pwdValue","setPwdValue","useDataProvider","useState","rpwdValue","setRPwdValue","submitColor","setSubmitColor","_jsx","Box","component","sx","m","width","noValidate","autoComplete","children","_jsxs","FormControl","Grid","item","xs","spacing","Typography","variant","TextField","id","label","type","onChange","e","target","value","length","Button","color","onClick","handleSubmit","data","password","httpAuthClient","concat","api_root","method","body","JSON","stringify","then","catch","ApiUserPasswordTab","curPwdValue","setCurPwdValue","newPwdValue","setNewPwdValue","styles","box","position","top","left","transform","bgcolor","border","boxShadow","p","textAlign","modal","overflow","height","fontWeight","display","joinedField","cursor","dbBtn","dbGrid","borderBottom","paddingBottom","paddingRight","actions","connStr","backgroundColor","fontFamily","C2Rpc","async","url","options","requestOptions","headers","Authorization","localStorage","getItem","fetch","json","ApiModal","_ref","output","setOutput","React","open","setOpen","boxStyle","setBoxStyle","_Fragment","stopPropagation","style","title","PlayCircleOutlineIcon","Modal","onClose","name","connection_string","port","hostname","createUrl","Loading","prev","createApi","ApiGenerateField","props","mode","ApiShow","show","DBConnectionEdit","form","useForm","other","setOther","username","setUsername","setPassword","dbhost","setDbhost","dbname","setDbname","dialect","setDialect","logData","setLogData","createConn","container","TextInput","source","defaultValue","helperText","fullWidth","size","FormLabel","RadioGroup","FormControlLabel","control","Radio","connectionString","responseData","err","alert","testConn","change","disabled","DBConnection","ApiURL","_ref2","href","ApiAdminHome","useGetList","pagination","page","perPage","apis","map","api","MyComp","BorderRadius","buttonStyle","borderColor","StartStopModal","running","handleClose","runningIcon","CheckCircleIcon","fontSize","CancelIcon","StartStopBox","mt","refresh","useRefresh","action","update","isPending","error","useUpdate","previousData","setTimeout","console","Running","alignItems","ProjectLink","Link","link","OpenInNewIcon","DownloadProject","download","IconButton","DownloadIcon","SampleColumnField","attribute","log","EmployeeLabel","_employee$attributes","_employee$attributes2","employee","instance","attributes","FirstName","LastName","CustomerLabel","_customer$attributes","_customer$attributes2","customer","CompanyName","ContactName","UserPasswordField","PasswordInput","CustomTab","CreateLocation","Create","CustomAttrForm","Overlay","showApiFab","ShowApiFab","CreateApiFab","redirect","useRedirect"],"sourceRoot":""}